<%
var UnrealTypeInfo = function(name,type) {
	this.name = name;
	this.type = type;
};
function MakeUniqueProperties(propertyInfos) {
	var counts = [];
	var results = [];
	for (var propertyInfoIndex in propertyInfos) {
		var propertyInfo = propertyInfos[propertyInfoIndex];
		var newName;
		if (counts[propertyInfo.name] == undefined) {
			counts[propertyInfo.name] = 1;
			newName = propertyInfo.name;
		} else {
			counts[propertyInfo.name] = counts[propertyInfo.name] + 1;
			newName = propertyInfo.name + counts[propertyInfo.name];
		}
		results.push(new UnrealTypeInfo(newName, propertyInfo.type));
	}
	return results;
}
function IsTypeLiteral(fieldType) {
	if (fieldType == undefined) {
		return false;
	} else if (fieldType == "Boolean") {
		return true;
	} else if (fieldType == "DateTime") {
		return true;
	} else if (fieldType == "double") {
		return true;
	} else if (fieldType == "int32") {
		return true;
	} else if (fieldType == "String") {
		return true;
	} else if (fieldType == "uint32") {
		return true;
	} else {
		return false;
	}
}
function GetUnrealType(fieldType) {
	if (fieldType == undefined) {
		return "FString /* undefined */";
	} else if (fieldType == "Boolean") {
		return "bool";
	} else if (fieldType == "DateTime") {
		return "int32 /* DateTime */";
	} else if (fieldType == "double") {
		return "double";
	} else if (fieldType == "int32") {
		return "int32";
	} else if (fieldType == "String") {
		return "FString";
	} else if (fieldType == "uint32") {
		return "int32 /* uint32 is not supported by blueprints */";
	} else {
		if (api == undefined) {
			return "FString /* " + fieldType+" api undefined*/";
		} else if (api.datatypes == undefined) {
			return "FString /* " + fieldType+" datatypes undefined*/";
		} else if (api.datatypes[fieldType] == undefined) {
			return "FString /* " + fieldType+" field does not exist */";
		} else if (api.datatypes[fieldType].properties == undefined) {
			return "FString /* " + fieldType+" field does not exist */";
		}
		return "FString /* " + fieldType+" complex type*/";
	}
}
function GetExpandedPropertyInfo(propertyTypes, fieldType, propertyName) {
	propertyName = LowerCaseFirstLetter(propertyName);
	if (fieldType == undefined) {
		propertyTypes.push(new UnrealTypeInfo(propertyName, GetUnrealType(fieldType)));
		return;
	} else if (IsTypeLiteral(fieldType)) {
		propertyTypes.push(new UnrealTypeInfo(propertyName, GetUnrealType(fieldType)));
		return;
	} else {
		if (api == undefined) {
			propertyTypes.push(new UnrealTypeInfo(propertyName, GetUnrealType(fieldType)));
			return;
		} else if (api.datatypes == undefined) {
			propertyTypes.push(new UnrealTypeInfo(propertyName, GetUnrealType(fieldType)));
			return;
		} else if (api.datatypes[fieldType] == undefined) {
			propertyTypes.push(new UnrealTypeInfo(propertyName, GetUnrealType(fieldType)));
			return;
		} else if (api.datatypes[fieldType].properties == undefined) {
			propertyTypes.push(new UnrealTypeInfo(propertyName, GetUnrealType(fieldType)));
			return;
		}
		var properties = api.datatypes[fieldType].properties;
		for(var propertyObject in properties) {
			var property = properties[propertyObject];
			GetExpandedPropertyInfo(propertyTypes, property.actualtype, property.name);
		}
	}
}
function LowerCaseFirstLetter(name) {
	if (name.length > 1) {
		var copy = name.substring(0, 1).toLowerCase() + name.substring(1);
		return copy;
	} else {
		return name.toLowerCase();
	}
}
function GetDelegateMacro(i) {
	var ones = [ "", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine" ];
    var teens = [ "Ten", "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen" ];
    var tens = [ "", "", "Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety" ];
	var prefix = "DECLARE_DYNAMIC_DELEGATE";
	var result = prefix;
	if (i > 0) {
		result += "_";
		var strNumber = "";
		if (i < 10) {
			strNumber = ones[i];
		} else if (i < 20) {
			strNumber = teens[i-10];
		} else if (i < 100) {
			strNumber = tens[Math.floor(i/10)] + ones[i%10];
		}
		result += strNumber;
		result += "Param";
		if (i > 1) {
			result += "s";
		}
	}
	if (i > 10) {
		//console.log("i="+i+" "+result);
	}
	return result;
}
%>
#pragma once

//////////////////////////////////////////////////////////////////////////////////////////////
// Automatically generated header file for the UE4 PlayFab plugin.
// This header file contains the function definitions.
//
// API: <%- api.name %>
// SDK Version: <%- sdkVersion %>
//////////////////////////////////////////////////////////////////////////////////////////////

#include "OnlineBlueprintCallProxyBase.h"
#include "PlayFabBaseModel.h"
#include "PlayFab<%- api.name %>Models.h"
#include "PlayFabPrivatePCH.h"
#include "PlayFab<%- api.name %>API.generated.h"

DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(FOnPlayFab<%- api.name %>RequestCompleted, FPlayFabBaseModel, response, bool, successful);

UCLASS(Blueprintable, BlueprintType)
class UPlayFab<%- api.name %>API : public UOnlineBlueprintCallProxyBase
{
    GENERATED_UCLASS_BODY()

public:

    UPROPERTY(BlueprintAssignable)
    FOnPlayFab<%- api.name %>RequestCompleted OnPlayFabResponse;

    /** Set the Request Json object */
    //UFUNCTION(BlueprintCallable, Category = "PlayFab")
        void SetRequestObject(UPlayFabJsonObject* JsonObject);

    /** Get the Response Json object */
    //UFUNCTION(BlueprintCallable, Category = "PlayFab")
        UPlayFabJsonObject* GetResponseObject();

    /** Applies percent-encoding to text */
    //UFUNCTION(BlueprintCallable, Category = "PlayFab")
        static FString PercentEncode(const FString& Text);

    /** Reset saved response data */
    //UFUNCTION(BlueprintCallable, Category = "PlayFab")
        void ResetResponseData();

    /** UOnlineBlueprintCallProxyBase interface */
    virtual void Activate() override;

    //////////////////////////////////////////////////////////////////////////
    // Generated PlayFab <%- api.name %> API Functions
    //////////////////////////////////////////////////////////////////////////

    <%

    // This loop goes through the subgroups of the api and orders the functions in groups.
    // It makes it a little easier to navigate.

    for(var subgroup in api.subgroups)
    {
    %>

    ///////////////////////////////////////////////////////
    // <%- api.subgroups[subgroup].name %>
    //////////////////////////////////////////////////////
<%

        // This loop goes through all the api calls.
        // It checks to see if the subgroup is the correct subgroup we are currently on.
        // If so it creates the function definition with the summary text.
        // This allows us to see the summary in UE4 when we hover over a node.

        for(var i in api.calls)
        {
            var apiCall = api.calls[i];
            if(apiCall.subgroup == api.subgroups[subgroup].name)
            {

            %>    /** <%- apiCall.summary %> */
<%            %>    UFUNCTION(BlueprintCallable, Category = "PlayFab | <%- api.name %> | <%- api.subgroups[subgroup].name %> ", meta = (BlueprintInternalUseOnly = "true", DeprecatedFunction))
<%            %>        static UPlayFab<%- api.name %>API* <%- apiCall.name %>(F<%- api.name %><%- apiCall.request %> request);
<%            %>
<%
				var propertyInfos = [];
				if (api.datatypes[apiCall.result] == undefined) {
					console.log("Error: apiCall.result datatype does not exist="+apiCall.result);
				} else {
					var properties = api.datatypes[apiCall.result].properties;
					if (properties == undefined) {
						console.log("Error: apiCall.result properties are undefined="+apiCall.result);
					} else {
						for(var propertyObject in properties) {
							var property = properties[propertyObject];
							GetExpandedPropertyInfo(propertyInfos, property.actualtype, property.name);
						}
					}
				}
				var propertyInfos2 = MakeUniqueProperties(propertyInfos);
              %>    // callbacks
<%            %>    <%- GetDelegateMacro(propertyInfos2.length) %>(FDelegateOnSuccess<%- apiCall.name %><%
				for (var propertyInfoIndex in propertyInfos2) {
					var propertyInfo = propertyInfos2[propertyInfoIndex];
					%>, <%- propertyInfo.type %>, <%- propertyInfo.name %><%
				}
              %>);
<%            %>    DECLARE_DYNAMIC_DELEGATE_FourParams(FDelegateOnFailure<%- apiCall.name %>, int32, errorCode, FString, errorName, FString, errorMessage, FString, errorDetails);
<%            %>
<%            %>    /** <%- apiCall.summary %> */
<%            %>	UFUNCTION(BlueprintCallable, Category = "PlayFab | <%- api.name %> | <%- api.subgroups[subgroup].name %> ", meta = (BlueprintInternalUseOnly = "true"))
<%            %>	static UPlayFab<%- api.name %>API* PlayFab<%- apiCall.name %>(<%
				var properties = api.datatypes[apiCall.request].properties;
				for(var propertyObject in properties) {
					var property = properties[propertyObject];
              %>
<%            %>		<%- GetUnrealType(property.actualtype) %> <%- LowerCaseFirstLetter(property.name) %>,<%
				}
              %>
<%            %>		FDelegateOnSuccess<%- apiCall.name %> onSuccess,
<%            %>    	FDelegateOnFailure<%- apiCall.name %> onFailure);
<%            %>
<%            %>	// Implements FOnPlayFabClientRequestCompleted
<%            %>	UFUNCTION(BlueprintCallable, Category = "PlayFab | <%- api.name %> | <%- api.subgroups[subgroup].name %> ", meta = (BlueprintInternalUseOnly = "true"))
<%            %>	void Helper<%- apiCall.name %>(FPlayFabBaseModel response, bool successful);
<%            %>
<%
            }
        }
    } %>

    /** PlayFab Request Info */
    FString PlayFabRequestURL;
    bool useSecretKey = false;
    bool useSessionTicket = false;
    bool cloudScript = false;
    bool isLoginRequest = false;

    /** Is the response valid JSON? */
    bool bIsValidJsonResponse;
    FString ResponseContent;
    int32 ResponseCode;

private:
    /** Internal bind function for the IHTTPRequest::OnProcessRequestCompleted() event */
    void OnProcessRequestComplete(FHttpRequestPtr Request, FHttpResponsePtr Response, bool bWasSuccessful);

protected:

    /** Internal request data stored as JSON */
    UPROPERTY()
        UPlayFabJsonObject* RequestJsonObj;

    /** Response data stored as JSON */
    UPROPERTY()
        UPlayFabJsonObject* ResponseJsonObj;

    /** Mapping of header section to values. Used to generate final header string for request */
    TMap<FString, FString> RequestHeaders;
};
